// src/app/home/home.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CheckScamService } from '../../services/check-scam.service';
import { CheckScamRequestDTO } from '../../dtos/check-scam-request.dto';
import { Router, RouterModule } from '@angular/router'; // ƒê·∫£m b·∫£o Router ƒë√£ import
import { HeaderComponent } from '../../components/header/header.component'; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n theo c·∫•u tr√∫c file c·ªßa b·∫°n
import { FooterComponent } from '../../components/footer/footer.component'; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n theo c·∫•u tr√∫c file c·ªßa b·∫°n
import { ChatBoxComponent } from '../../components/chat-box/chat-box.component'; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n theo c·∫•u tr√∫c file c·ªßa b·∫°n
// import { LoadingComponent } from './loading.component';
// import { SkeletonLoadingComponent } from './skeleton-loading.component';
import { TopScamService, TopScamItem } from '../../services/top-scam.service';
import { VerticalBannerComponent } from './vertical-banner/vertical-banner.component';
import { ActivityWidgetComponent } from '../activity-widget/activity-widget.component';

// Interface cho chi ti·∫øt ƒë·ªëi t∆∞·ª£ng
interface ScamDetail {
  id: number;
  info: string;
  name: string;
  description: string;
  evidenceImages: string[];
  totalScamAmount: number;
  reportCount: number;
  lastReportDate: string;
  status: 'danger' | 'warning' | 'safe';
  type: 'phone' | 'bank' | 'url';
}

// C·∫¨P NH·∫¨T L·∫†I INTERFACE N√ÄY ƒê·ªÇ KH·ªöP CH√çNH X√ÅC V·ªöI JSON T·ª™ BACKEND C·ª¶A B·∫†N (nh∆∞ ·∫£nh network)
interface SearchApiResponse {
  info: string;
  type: number;
  description: string;
  reportDescription: string;
  moneyScam: string;
  dateReport: string | null;
  verifiedCount: number;
  lastReportAt: string;
  evidenceURLs: string[]; // <-- Ch√∫ √Ω ch·ªØ hoa 'URLs'
  analysis: string; // ƒê√¢y l√† tr∆∞·ªùng 'analysis' t·ª´ backend
  // B·ªè c√°c tr∆∞·ªùng `code`, `message`, `data` v√¨ ch√∫ng kh√¥ng c√≥ ·ªü c·∫•p root c·ªßa response API c·ªßa b·∫°n
  // code?: number;
  // message?: string;
  // data?: any;
}

interface Message {
  sender: 'user' | 'bot';
  text: string;
  isUser: boolean;
}

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterModule,
    HeaderComponent,
    FooterComponent,
    ChatBoxComponent,
    VerticalBannerComponent,
    ActivityWidgetComponent
    // LoadingComponent,
    // SkeletonLoadingComponent
  ],
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss'
})
export class HomeComponent implements OnInit {

  info: string = '';
  selectedType: number = 1;
  currentSearchIcon: string = 'fas fa-mobile-alt';
  
  // searchResult: SearchApiResponse | null = null; // D√≤ng n√†y ph·∫£i ƒë∆∞·ª£c comment ho·∫∑c x√≥a
  isLoading: boolean = false;
  errorMessage: string | null = null;

  messages: Message[] = [];
  showChatbox: boolean = false;

  // D·ªØ li·ªáu t·ª´ backend
  phoneNumbers: TopScamItem[] = [];
  bankAccounts: TopScamItem[] = [];
  websites: TopScamItem[] = [];
  isLoadingTopData: boolean = false;
  topDataError: string | null = null;

  // Modal chi ti·∫øt
  showDetailModal: boolean = false;
  selectedScamDetail: ScamDetail | null = null;
  isLoadingDetail: boolean = false;

  // Data m·∫´u cho chi ti·∫øt
  mockScamDetails: { [key: string]: ScamDetail } = {
    '0346304549': {
      id: 1,
      info: '0346304549',
      name: 'Tr·ªãnh C√¥ng Minh',
      description: 'Gi·∫£ danh nh√¢n vi√™n ng√¢n h√†ng ƒë·ªÉ l·ª´a ƒë·∫£o vay ti·ªÅn online v·ªõi l√£i su·∫•t th·∫•p. Th∆∞·ªùng li√™n h·ªá v√†o gi·ªù h√†nh ch√≠nh, n√≥i chuy·ªán r·∫•t thuy·∫øt ph·ª•c v√† c√≥ ki·∫øn th·ª©c chuy√™n m√¥n.',
      evidenceImages: [
        'https://via.placeholder.com/400x300?text=B%E1%BA%B1ng+ch%E1%BB%A9ng+1',
        'https://via.placeholder.com/400x300?text=Tin+nh%E1%BA%AFn+l%E1%BB%ABa+%C4%91%E1%BA%A3o',
        'https://via.placeholder.com/400x300?text=Screenshot+website+gi%E1%BA%A3'
      ],
      totalScamAmount: 15420000,
      reportCount: 127,
      lastReportDate: '2024-12-15T10:30:00',
      status: 'danger',
      type: 'phone'
    },
    '0336970084': {
      id: 2,
      info: '0336970084',
      name: 'Nguy·ªÖn Huy T√πng',
      description: 'T·ª± x∆∞ng l√† nh√¢n vi√™n c·ªßa s√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠, g·ªçi ƒëi·ªán qu·∫£ng c√°o s·∫£n ph·∫©m gi·∫£ v√† ƒë√≤i h·ªèi thanh to√°n tr∆∞·ªõc. ƒê√£ l·ª´a nhi·ªÅu n·∫°n nh√¢n.',
      evidenceImages: [
        'https://via.placeholder.com/400x300?text=Giao+di%E1%BB%87n+app+gi%E1%BA%A3',
        'https://via.placeholder.com/400x300?text=H%C3%B3a+%C4%91%C6%A1n+gi%E1%BA%A3'
      ],
      totalScamAmount: 8950000,
      reportCount: 89,
      lastReportDate: '2024-12-10T14:20:00',
      status: 'danger',
      type: 'phone'
    },
    '1020541389': {
      id: 3,
      info: '1020541389',
      name: 'T√†i kho·∫£n Vietcombank gi·∫£',
      description: 'T√†i kho·∫£n ng√¢n h√†ng gi·∫£ m·∫°o Vietcombank, ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ nh·∫≠n ti·ªÅn t·ª´ c√°c v·ª• l·ª´a ƒë·∫£o mua b√°n online. Th∆∞·ªùng g·ª≠i QR code ho·∫∑c s·ªë t√†i kho·∫£n tr·ª±c ti·∫øp.',
      evidenceImages: [
        'https://via.placeholder.com/400x300?text=QR+code+gi%E1%BA%A3',
        'https://via.placeholder.com/400x300?text=Th%C3%B4ng+tin+t%C3%A0i+kho%E1%BA%A3n',
        'https://via.placeholder.com/400x300?text=L%E1%BB%8Bch+s%E1%BB%AD+giao+d%E1%BB%8Bch'
      ],
      totalScamAmount: 25600000,
      reportCount: 203,
      lastReportDate: '2024-12-18T09:15:00',
      status: 'danger',
      type: 'bank'
    },
    'zzuxzy.cn': {
      id: 4,
      info: 'zzuxzy.cn',
      name: 'Website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ gi·∫£',
      description: 'Website gi·∫£ m·∫°o c√°c th∆∞∆°ng hi·ªáu n·ªïi ti·∫øng, b√°n s·∫£n ph·∫©m v·ªõi gi√° r·∫ª b·∫•t th∆∞·ªùng. Sau khi nh·∫≠n ti·ªÅn s·∫Ω kh√¥ng g·ª≠i h√†ng ho·∫∑c g·ª≠i h√†ng gi·∫£.',
      evidenceImages: [
        'https://via.placeholder.com/400x300?text=Giao+di%E1%BB%87n+website',
        'https://via.placeholder.com/400x300?text=S%E1%BA%A3n+ph%E1%BA%A9m+gi%E1%BA%A3',
        'https://via.placeholder.com/400x300?text=Th%C3%B4ng+b%C3%A1o+c%E1%BA%A3nh+b%C3%A1o'
      ],
      totalScamAmount: 12300000,
      reportCount: 156,
      lastReportDate: '2024-12-12T16:45:00',
      status: 'danger',
      type: 'url'
    }
  };

  // Tab management
  activeTab: string = 'phone';

searchResult: any;

  constructor(
    private CheckScamService: CheckScamService,
    private router: Router, // <-- ƒê·∫£m b·∫£o Router ƒë∆∞·ª£c inject
    private topScamService: TopScamService
  ) { }

  ngOnInit(): void {
    this.updateSearchIcon();
    this.loadTopScamData();
  }

  selectSearchType(type: number): void {
    this.selectedType = type;
    this.updateSearchIcon();
    this.info = '';
    this.errorMessage = null;
  }

  getSearchPlaceholder(): string {
    switch (this.selectedType) {
      case 1: 
        return 'V√≠ d·ª•: 0123456789';
      case 2: 
        return 'V√≠ d·ª•: 1234567890';
      case 3: 
        return 'V√≠ d·ª•: https://example.com';
      default: 
        return 'Nh·∫≠p th√¥ng tin c·∫ßn ki·ªÉm tra...';
    }
  }

  updateSearchIcon(): void {
    switch (this.selectedType) {
      case 1:
        this.currentSearchIcon = 'fas fa-mobile-alt';
        break;
      case 2:
        this.currentSearchIcon = 'fas fa-university';
        break;
      case 3:
        this.currentSearchIcon = 'fas fa-globe';
        break;
      default:
        this.currentSearchIcon = 'fas fa-question-circle';
    }
  }

  sendMessage(): void {
    const value = this.info.trim();
    if (!value) {
      this.errorMessage = 'Vui l√≤ng nh·∫≠p th√¥ng tin c·∫ßn tra c·ª©u.';
      return;
    }

    this.errorMessage = null;
    this.isLoading = true;

    // C√°c validate ƒë·∫ßu v√†o (gi·ªØ nguy√™n)
    if (this.selectedType === 1 && !this.isPhoneNumber(value)) {
      this.errorMessage = 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† g·ªìm 10 ch·ªØ s·ªë.';
      this.isLoading = false;
      return;
    }
    if (this.selectedType === 2 && !this.isBankNumber(value)) {
      this.errorMessage = 'S·ªë t√†i kho·∫£n ch·ªâ ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± s·ªë.';
      this.isLoading = false;
      return;
    }
    if (this.selectedType === 3 && !this.isUrl(value)) {
      this.errorMessage = 'URL kh√¥ng h·ª£p l·ªá (v√≠ d·ª• h·ª£p l·ªá: https://example.com ho·∫∑c example.vn).';
      this.isLoading = false;
      return;
    }

    const requestBody: CheckScamRequestDTO = {
      info: value,
      type: this.selectedType
    };

    this.CheckScamService.CheckScam(requestBody).subscribe({
      next: (response) => {
        this.isLoading = false;
        if (response && response.info) {
          this.router.navigate(['/analyze'], {
            state: {
              result: response,
              type: this.selectedType,
              info: value
            }
          });
        } else {
          this.errorMessage = 'C·∫•u tr√∫c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß kh√¥ng h·ª£p l·ªá.';
        }
      },
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = error?.error?.message || error?.message || 'ƒê√£ x·∫£y ra l·ªói khi tra c·ª©u.';
      }
    });
    this.info = '';
  }

  // ... (gi·ªØ nguy√™n c√°c h√†m validate v√† robot interaction)
  private isPhoneNumber(value: string): boolean {
    return /^0\d{9}$/.test(value.trim());
  }

  private isBankNumber(value: string): boolean {
    return /^\d+$/.test(value.trim());
  }

  private isUrl(value: string): boolean {
    const urlRegex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/i;
    return urlRegex.test(value.trim());
  }

  onAiTuVanClicked() {
    this.showChatbox = true;
  }

  closeChatbox() {
    this.showChatbox = false;
  }

  onRobotClick(): void {
    const actions = [
      () => this.showRobotMessage('ü§ñ Xin ch√†o! T√¥i l√† Robot CheckScam! Ch√¢n t√¥i c√≥ nhanh kh√¥ng?'),
      () => this.showRobotMessage('üõ°Ô∏è ƒêang tu·∫ßn tra b·∫£o v·ªá b·∫°n kh·ªèi l·ª´a ƒë·∫£o n√®!'),
      () => this.showRobotMessage('‚ö° T√¥i ch·∫°y quanh ƒë√¢y ƒë·ªÉ ki·ªÉm tra th√¥ng tin cho b·∫°n!'),
      () => this.showRobotMessage('üîç H√£y nh·∫≠p th√¥ng tin v√†o √¥ t√¨m ki·∫øm ƒë·ªÉ t√¥i gi√∫p b·∫°n!'),
      () => this.showRobotMessage('üèÉ‚Äç‚ôÇÔ∏è T√¥i c√≥ th·ªÉ ch·∫°y nhanh h∆°n! Xem ch√¢n t√¥i ƒë·∫°p th·∫ø n√†o!'),
      () => this.showRobotMessage('üöÄ B·∫°n mu·ªën xem t√¥i ch·∫°y TURBO kh√¥ng?'),
      () => this.showRobotMessage('ü§ñ Ch√¢n robot c·ªßa t√¥i ho·∫°t ƒë·ªông b·∫±ng AI ti√™n ti·∫øn!'),
      () => this.showRobotMessage('üëÅÔ∏è T√¥i ch·ªõp m·∫Øt ƒë·ªÉ gi·ªØ cho b·∫°n th·∫•y cute!'),
      () => this.speedUpRobot()
    ];
    
    const randomAction = actions[Math.floor(Math.random() * actions.length)];
    randomAction();
  }

  private showRobotMessage(message: string): void {
    const messageElement = document.createElement('div');
    messageElement.innerHTML = message;
    messageElement.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: linear-gradient(45deg, #FF6B35, #FF8A65);
      color: white;
      padding: 15px 20px;
      border-radius: 20px;
      font-weight: 600;
      box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
      z-index: 10000;
      animation: fadeInOut 3s ease-in-out;
      max-width: 300px;
      text-align: center;
    `;
    
    document.body.appendChild(messageElement);
    
    setTimeout(() => {
      if (messageElement.parentNode) {
        messageElement.parentNode.removeChild(messageElement);
      }
    }, 3000);
  }

  private speedUpRobot(): void {
    const robot = document.querySelector('.search-robot') as HTMLElement;
    if (robot) {
      robot.style.animationDuration = '3s';
      robot.classList.add('turbo');
      this.showRobotMessage('üöÄ TURBO MODE ACTIVATED! Ch√¢n robot ƒëang ch·∫°y si√™u nhanh!');
      
      setTimeout(() => {
        robot.style.animationDuration = '10s';
        robot.classList.remove('turbo');
      }, 5000);
    }
  }

  getTypeIcon(type: string): string {
    switch (type) {
      case 'phone': return 'fas fa-mobile-alt';
      case 'bank': return 'fas fa-university';
      case 'url': return 'fas fa-globe';
      default: return 'fas fa-question-circle';
    }
  }

  getTypeName(type: string): string {
    switch (type) {
      case 'phone': return 'ƒêi·ªán tho·∫°i';
      case 'bank': return 'T√†i kho·∫£n';
      case 'url': return 'Website';
      default: return 'Kh√°c';
    }
  }

  getStatusText(status: string): string {
    switch (status) {
      case 'danger': return 'Nguy hi·ªÉm';
      case 'warning': return 'C·∫£nh b√°o';
      case 'safe': return 'An to√†n';
      default: return 'Ch∆∞a r√µ';
    }
  }

  // Tab management methods
  setActiveTab(tab: string): void {
    this.activeTab = tab;
  }

  // Load data t·ª´ backend
  loadTopScamData(): void {
    this.isLoadingTopData = true;
    this.topDataError = null;

    // Load t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ backend
    this.topScamService.getTopAll().subscribe({
      next: (response) => {
        if (response && response.status === 'OK' && response.data) {
          // D·ª±a v√†o c·∫•u tr√∫c API response t·ª´ document
          this.phoneNumbers = response.data.phones || [];
          this.bankAccounts = response.data.banks || [];
          this.websites = response.data.urls || [];
        } else {
          this.loadIndividualData(); // Fallback to individual API calls
        }
        this.isLoadingTopData = false;
      },
      error: (error) => {

        this.loadIndividualData(); // Fallback to individual API calls
      }
    });
  }

  // Fallback method ƒë·ªÉ load t·ª´ng lo·∫°i d·ªØ li·ªáu ri√™ng
  private loadIndividualData(): void {
    // Load phones
    this.topScamService.getTopPhones().subscribe({
      next: (response) => {
        if (response && response.status === 'OK') {
          this.phoneNumbers = response.data || [];

        }
      },
      error: (error) => {

        this.topDataError = 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·ªë ƒëi·ªán tho·∫°i';
      }
    });

    // Load banks
    this.topScamService.getTopBanks().subscribe({
      next: (response) => {
        if (response && response.status === 'OK') {
          this.bankAccounts = response.data || [];

        }
      },
      error: (error) => {

        this.topDataError = 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t√†i kho·∫£n ng√¢n h√†ng';
      }
    });

    // Load URLs
    this.topScamService.getTopUrls().subscribe({
      next: (response) => {
        if (response && response.status === 'OK') {
          this.websites = response.data || [];

        }
      },
      error: (error) => {

        this.topDataError = 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu website';
      }
    });

    this.isLoadingTopData = false;
  }

  // Methods cho template
  getPhoneNumbers(): TopScamItem[] {
    return this.phoneNumbers;
  }

  getBankAccounts(): TopScamItem[] {
    return this.bankAccounts;
  }

  getWebsites(): TopScamItem[] {
    return this.websites;
  }

  // Methods cho chi ti·∫øt - Navigate to detail page with correct type
  onItemClick(item: TopScamItem): void {
    // X√°c ƒë·ªãnh type t·ª´ TopScamItem
    let type = 1; // Default to phone
    if (item.type === 'phone') type = 1;
    else if (item.type === 'bank') type = 2;
    else if (item.type === 'url') type = 3;
    
    // Chuy·ªÉn h∆∞·ªõng v·ªõi query parameter type
    this.router.navigate(['/subject-detail', item.info], {
      queryParams: { type: type }
    });
  }

  closeDetailModal(): void {
    this.showDetailModal = false;
    this.selectedScamDetail = null;
    this.isLoadingDetail = false;
  }

  formatCurrency(amount: number): string {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }

  formatDate(dateString: string): string {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }
}
