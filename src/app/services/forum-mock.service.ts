import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { ForumPostDto } from '../dtos/forum-post.dto';

@Injectable({
  providedIn: 'root'
})
export class ForumServiceMock {
  
  // Mock data for testing
  private mockPosts: ForumPostDto[] = [
    {
      id: '1',
      title: 'C·∫£nh b√°o: L·ª´a ƒë·∫£o qua tin nh·∫Øn SMS ng√¢n h√†ng',
      content: 'G·∫ßn ƒë√¢y c√≥ nhi·ªÅu tr∆∞·ªùng h·ª£p l·ª´a ƒë·∫£o qua tin nh·∫Øn SMS gi·∫£ m·∫°o ng√¢n h√†ng. C√°c b·∫°n c·∫©n th·∫≠n v·ªõi nh·ªØng tin nh·∫Øn y√™u c·∫ßu c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ho·∫∑c nh·∫•n v√†o link l·∫°. Lu√¥n ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i g·ª≠i v√† li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ng√¢n h√†ng n·∫øu c√≥ nghi ng·ªù.',
      imageUrl: 'https://via.placeholder.com/500x300/FF6B6B/white?text=C·∫¢NH+B√ÅO+SMS',
      authorId: 'user1',
      authorName: 'Chuy√™n gia b·∫£o m·∫≠t',
      authorEmail: 'chuyengia.baomat@example.com',
      createdAt: new Date(Date.now() - 3600000), // 1 hour ago
      updatedAt: new Date(Date.now() - 3600000),
      likesCount: 25,
      commentsCount: 12,
      isLiked: false
    },
    {
      id: '2',
      title: '',
      content: 'M√¨nh v·ª´a nh·∫≠n ƒë∆∞·ª£c cu·ªôc g·ªçi t·ª´ s·ªë l·∫° t·ª± x∆∞ng l√† nh√¢n vi√™n ng√¢n h√†ng, h·ªèi th√¥ng tin th·∫ª t√≠n d·ª•ng. May m√† m√¨nh c·∫£nh gi√°c kh√¥ng cung c·∫•p. M·ªçi ng∆∞·ªùi c≈©ng c·∫©n th·∫≠n nh√©! üö®',
      authorId: 'user2',
      authorName: 'Ng∆∞·ªùi d√πng th√¥ng th√°i',
      authorEmail: 'user.thongth√°i@example.com',
      createdAt: new Date(Date.now() - 7200000), // 2 hours ago
      updatedAt: new Date(Date.now() - 7200000),
      likesCount: 18,
      commentsCount: 8,
      isLiked: true
    },
    {
      id: '3',
      title: 'Kinh nghi·ªám ph√°t hi·ªán website l·ª´a ƒë·∫£o',
      content: 'Chia s·∫ª m·ªôt s·ªë kinh nghi·ªám ƒë·ªÉ nh·∫≠n bi·∫øt website l·ª´a ƒë·∫£o:\n\n1. Ki·ªÉm tra URL c√≥ https v√† ch√≠nh t·∫£ ƒë√∫ng\n2. Xem th√¥ng tin li√™n h·ªá c·ªßa website\n3. ƒê·ªçc ƒë√°nh gi√° t·ª´ ng∆∞·ªùi d√πng kh√°c\n4. Kh√¥ng nh·∫≠p th√¥ng tin c√° nh√¢n v√†o site l·∫°\n5. S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c thanh to√°n an to√†n\n\nHy v·ªçng h·ªØu √≠ch cho m·ªçi ng∆∞·ªùi!',
      imageUrl: 'https://via.placeholder.com/500x300/4267B2/white?text=WEBSITE+AN+TO√ÄN',
      authorId: 'user3',
      authorName: 'Chuy√™n vi√™n IT',
      authorEmail: 'chuyenvien.it@example.com',
      createdAt: new Date(Date.now() - 86400000), // 1 day ago
      updatedAt: new Date(Date.now() - 86400000),
      likesCount: 42,
      commentsCount: 15,
      isLiked: false
    },
    {
      id: '4',
      title: '',
      content: 'C√≥ ai bi·∫øt c√°ch ki·ªÉm tra m·ªôt s·ªë ƒëi·ªán tho·∫°i c√≥ ph·∫£i l·ª´a ƒë·∫£o kh√¥ng? M√¨nh hay nh·∫≠n ƒë∆∞·ª£c cu·ªôc g·ªçi t·ª´ nh·ªØng s·ªë l·∫°.',
      authorId: 'user4',
      authorName: 'Ng∆∞·ªùi m·ªõi',
      authorEmail: 'nguoi.moi@example.com',
      createdAt: new Date(Date.now() - 172800000), // 2 days ago
      updatedAt: new Date(Date.now() - 172800000),
      likesCount: 8,
      commentsCount: 22,
      isLiked: false
    },
    {
      id: '5',
      title: 'C·∫£nh b√°o: Chi√™u tr√≤ l·ª´a ƒë·∫£o m·ªõi qua m·∫°ng x√£ h·ªôi',
      content: 'C·∫£nh b√°o t·∫•t c·∫£ m·ªçi ng∆∞·ªùi v·ªÅ chi√™u tr√≤ l·ª´a ƒë·∫£o m·ªõi:\n\nHacker t·∫°o t√†i kho·∫£n gi·∫£ m·∫°o ng∆∞·ªùi th√¢n, b·∫°n b√® v√† nh·∫Øn tin vay ti·ªÅn kh·∫©n c·∫•p. H·ªç s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n t·ª´ m·∫°ng x√£ h·ªôi ƒë·ªÉ tƒÉng ƒë·ªô tin c·∫≠y.\n\nC√°ch ph√≤ng tr√°nh:\n- G·ªçi ƒëi·ªán x√°c nh·∫≠n tr∆∞·ªõc khi chuy·ªÉn ti·ªÅn\n- Ki·ªÉm tra t√†i kho·∫£n c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng\n- Kh√¥ng chuy·ªÉn ti·ªÅn qua link l·∫°',
      imageUrl: 'https://via.placeholder.com/500x300/FF9800/white?text=C·∫¢NH+B√ÅO+MXH',
      authorId: 'user5',
      authorName: 'Admin b·∫£o m·∫≠t',
      authorEmail: 'admin.baomat@example.com',
      createdAt: new Date(Date.now() - 259200000), // 3 days ago
      updatedAt: new Date(Date.now() - 259200000),
      likesCount: 67,
      commentsCount: 28,
      isLiked: true
    }
  ];

  getPosts(page: number = 1, limit: number = 10): Observable<{data: ForumPostDto[], total: number, page: number, limit: number}> {
    // Simulate API response
    return of({
      data: this.mockPosts,
      total: this.mockPosts.length,
      page: page,
      limit: limit
    });
  }

  getPostById(id: string): Observable<ForumPostDto> {
    const post = this.mockPosts.find(p => p.id === id);
    return of(post || this.mockPosts[0]);
  }

  likePost(postId: string): Observable<void> {
    return of(void 0);
  }

  unlikePost(postId: string): Observable<void> {
    return of(void 0);
  }
}
